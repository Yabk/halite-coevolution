repeat_evaluation = 10  # number of games played in each evaluation
enemy_agent = "random" # enemy agent used in evaluation (random/naive/mnmnao)
generations = 100
debug = false # if true, evaluator will print exceptions from agents during evaluation

[ship] # ship subevolution configuration
alg = "GA" # algorithm used for subevolution (GA/ES)
model = "NN" # model used for subevolution (NN/CGP/GP)
generations_per_tick = 1 # number of subevolution generations per generation of the main evolution
population_size = 100
tournsize = 3 # tournament size for selection
save_best = 1 # number of best individuals to automatically promote to the next generation
population_file = "ship-population.pkl" # pickled initial population (optional)

[ship.nn] # neural network model configuration for ship subevolution
layer_sizes = [12, 12]

[ship.nn.mutation] # neural network model mutation configuration for ship subevolution
probability = 0.1 # probability of mutation
sigma = 0.1 # standard deviation of mutation

[ship.nn.crossover] # neural network model crossover configuration for ship subevolution
k = 2 # number of crossover points


[yard] # yard subevolution configuration
alg = "ES"
model = "CGP"
generations_per_tick = 10
mu = 1 # number of parents
lmbd = 4 # number of offspring
elitism = true
parents_file = "yard-population.pkl" # pickled initial parents population (optional)

[yard.cgp] # cgp model configuration for yard subevolution
grid_width = 5
grid_height = 10
levels_back = 3
